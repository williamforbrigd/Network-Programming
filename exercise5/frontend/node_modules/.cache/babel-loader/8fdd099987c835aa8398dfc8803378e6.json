{"ast":null,"code":"var _jsxFileName = \"/Users/williamforbrigd/OneDrive - NTNU/4 Dataingeni\\xF8r/Nettverksprogrammering/\\xD8vinger/exercise5/frontend/src/components/PostRequest.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PostRequest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: \"\",\n      error: null,\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    const requestOptions = {\n      mode: 'no-cors',\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      } //body: JSON.stringify({ code: \"hei hva sskjer\"})\n\n    };\n    fetch('http://localhost:8080/docker', requestOptions).then(response => response.json()).then(result => {\n      console.log(\"result  \" + result);\n      this.setState({\n        code: result,\n        isLoaded: true\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      code,\n      error,\n      isLoaded\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"The code is: \", code]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default PostRequest;","map":{"version":3,"sources":["/Users/williamforbrigd/OneDrive - NTNU/4 Dataingeniør/Nettverksprogrammering/Øvinger/exercise5/frontend/src/components/PostRequest.js"],"names":["React","PostRequest","Component","constructor","props","state","code","error","isLoaded","componentDidMount","requestOptions","mode","method","headers","fetch","then","response","json","result","console","log","setState","render","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,KAAK,EAAE,IAFE;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAKH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,cAAc,GAAG;AACnBC,MAAAA,IAAI,EAAE,SADa;AAEnBC,MAAAA,MAAM,EAAE,KAFW;AAGnBC,MAAAA,OAAO,EAAE;AAAE,wBAAiB;AAAnB,OAHU,CAInB;;AAJmB,KAAvB;AAOAC,IAAAA,KAAK,CAAC,8BAAD,EAAiCJ,cAAjC,CAAL,CACKK,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAGSG,MAAD,IAAY;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaF,MAAzB;AACA,WAAKG,QAAL,CAAc;AACVf,QAAAA,IAAI,EAAEY,MADI;AAEVV,QAAAA,QAAQ,EAAE;AAFA,OAAd;AAIH,KATT,EAUSD,KAAD,IAAW;AACP,WAAKc,QAAL,CAAc;AACVb,QAAAA,QAAQ,EAAE,IADA;AAEVD,QAAAA;AAFU,OAAd;AAIH,KAfT;AAkBH;;AAEDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEhB,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA4B,KAAKH,KAAvC;;AACA,QAAGE,KAAH,EAAU;AACN,0BAAO;AAAA,8BAAaA,KAAK,CAACgB,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD,MAEO,IAAG,CAACf,QAAJ,EAAc;AACjB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFM,MAEA;AACH,0BACI;AAAA,oCACkBF,IADlB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ;;AAnDqC;;AAwD1C,eAAeL,WAAf","sourcesContent":["import React from 'react';\n\nclass PostRequest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: \"\",\n            error: null,\n            isLoaded: false\n        };\n    }\n\n    componentDidMount() {\n        const requestOptions = {\n            mode: 'no-cors',\n            method: 'GET',\n            headers: { 'Content-Type' : 'application/json'},\n            //body: JSON.stringify({ code: \"hei hva sskjer\"})\n        };\n\n        fetch('http://localhost:8080/docker', requestOptions) \n            .then(response => response.json())\n            .then(\n                (result) => {\n                    console.log(\"result  \" + result);\n                    this.setState({\n                        code: result,\n                        isLoaded: true\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            );\n\n    }\n\n    render() {\n        const { code, error, isLoaded } = this.state;\n        if(error) {\n            return <div>Error: {error.message}</div>\n        } else if(!isLoaded) {\n            return <div>Loading..</div>\n        } else {\n            return (\n                <div>\n                    The code is: {code}\n                </div>\n            );\n        }\n    }\n\n\n}\n\nexport default PostRequest;"]},"metadata":{},"sourceType":"module"}